write.csv(mydf, file = "dataset.csv", row.names = FALSE)
}
if(savepdf=TRUE){
pdf("dataPlot.pdf")
plot(data)
dev.off()
}
return(mydf)
}
genData <- function(datapoints=100, spirals=3, sd=0.05, savecsv=TRUE, savepdf=TRUE){
data <- mlbench.spirals(n=datapoints, cycles=spirals, sd=sd)
#mlbench.2dnormals(500,cl=3)
mydf <- cbind(as.data.frame(data$x),as.data.frame(data$classes))
names(mydf) <- c("milky", "way", "classes")
if(savecsv=TRUE){
if(savecsv==TRUE){
write.csv(mydf, file = "dataset.csv", row.names = FALSE)
}
if(savepdf==TRUE){
pdf("dataPlot.pdf")
plot(data)
dev.off()
}
return(mydf)
}
data <- mlbench.spirals(n=datapoints, cycles=spirals, sd=sd)
datapoints=100
spirals=3
sd=0.05
savecsv=TRUE
savepdf=TRUE
data <- mlbench.spirals(n=datapoints, cycles=spirals, sd=sd)
mydf <- cbind(as.data.frame(data$x),as.data.frame(data$classes))
names(mydf) <- c("milky", "way", "classes")
if(savecsv==TRUE){
write.csv(mydf, file = "dataset.csv", row.names = FALSE)
}
if(savepdf==TRUE){
pdf("dataPlot.pdf")
plot(data)
dev.off()
}
return(mydf)
}
if(savepdf=TRUE){
pdf("dataPlot.pdf")
genData <- function(datapoints=100, spirals=3, sd=0.05, savecsv=TRUE, savepdf=TRUE){
data <- mlbench.spirals(n=datapoints, cycles=spirals, sd=sd)
#mlbench.2dnormals(500,cl=3)
mydf <- cbind(as.data.frame(data$x),as.data.frame(data$classes))
names(mydf) <- c("milky", "way", "classes")
if(savecsv=TRUE){
write.csv(mydf, file = "dataset.csv", row.names = FALSE)
}
if(savepdf=TRUE){
pdf("dataPlot.pdf")
plot(data)
dev.off()
}
return(mydf)
}
genData(100,2,0.05)
genData <- function(datapoints=100, spirals=3, sd=0.05, savecsv=TRUE, savepdf=TRUE){
data <- mlbench.spirals(n=datapoints, cycles=spirals, sd=sd)
#mlbench.2dnormals(500,cl=3)
mydf <- cbind(as.data.frame(data$x),as.data.frame(data$classes))
names(mydf) <- c("milky", "way", "classes")
if(savecsv=TRUE){
write.csv(mydf, file = "dataset.csv", row.names = FALSE)
}
if(savepdf=TRUE){
pdf("dataPlot.pdf")
plot(data)
dev.off()
}
return(mydf)
}
genData <- function(datapoints=100, spirals=3, sd=0.05, savecsv=TRUE, savepdf=TRUE){
data <- mlbench.spirals(n=datapoints, cycles=spirals, sd=sd)
#mlbench.2dnormals(500,cl=3)
mydf <- cbind(as.data.frame(data$x),as.data.frame(data$classes))
names(mydf) <- c("milky", "way", "classes")
if(savecsv){
write.csv(mydf, file = "dataset.csv", row.names = FALSE)
}
if(savepdf){
pdf("dataPlot.pdf")
plot(data)
dev.off()
}
return(mydf)
}
genData(100,2,0.05)
genData <- function(datapoints=100, spirals=3, sd=0.05, savecsv=TRUE, savepdf=TRUE){
data <- mlbench.spirals(n=datapoints, cycles=spirals, sd=sd)
#mlbench.2dnormals(500,cl=3)
mydf <- cbind(as.data.frame(data$x),as.data.frame(data$classes))
names(mydf) <- c("milky", "way", "classes")
if(savecsv){
write.csv(mydf, file = "dataset.csv", row.names = FALSE)
}
if(savepdf){
pdf("dataPlot.pdf")
plot(data, title="Milkyway")
dev.off()
}
return(mydf)
}
genData(100,2,0.05)
genData <- function(datapoints=100, spirals=3, sd=0.05, savecsv=TRUE, savepdf=TRUE){
data <- mlbench.spirals(n=datapoints, cycles=spirals, sd=sd)
#mlbench.2dnormals(500,cl=3)
mydf <- cbind(as.data.frame(data$x),as.data.frame(data$classes))
names(mydf) <- c("milky", "way", "classes")
if(savecsv){
write.csv(mydf, file = "dataset.csv", row.names = FALSE)
}
if(savepdf){
pdf("dataPlot.pdf")
plot(data, main="Milkyway")
dev.off()
}
return(mydf)
}
genData(100,2,0.05)
?plot
genData <- function(datapoints=100, spirals=3, sd=0.05, savecsv=TRUE, savepdf=TRUE){
data <- mlbench.spirals(n=datapoints, cycles=spirals, sd=sd)
#mlbench.2dnormals(500,cl=3)
mydf <- cbind(as.data.frame(data$x),as.data.frame(data$classes))
names(mydf) <- c("milky", "way", "classes")
if(savecsv){
write.csv(mydf, file = "dataset.csv", row.names = FALSE)
}
if(savepdf){
pdf("dataPlot.pdf")
plot(data, main="Milkyway", xlab=X1, ylab=X2)
dev.off()
}
return(mydf)
}
genData(100,2,0.05)
genData <- function(datapoints=100, spirals=3, sd=0.05, savecsv=TRUE, savepdf=TRUE){
data <- mlbench.spirals(n=datapoints, cycles=spirals, sd=sd)
#mlbench.2dnormals(500,cl=3)
mydf <- cbind(as.data.frame(data$x),as.data.frame(data$classes))
names(mydf) <- c("milky", "way", "classes")
if(savecsv){
write.csv(mydf, file = "dataset.csv", row.names = FALSE)
}
if(savepdf){
pdf("dataPlot.pdf")
plot(data, main="Milkyway", xlab="X1", ylab="X2")
dev.off()
}
return(mydf)
}
genData(100,2,0.05)
rm(list = ls())
### Load Packages
if (!require("mvtnorm")) install.packages("mvtnorm"); library(mvtnorm)
if (!require("ggplot2")) install.packages("ggplot2"); library(ggplot2)
### Initialize auxilliary functions
# Create covariance matrix
sigmaXY <- function(rho, sdX, sdY) {
covTerm  <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
return(VCmatrix)
}
# Generate bivariate normal data
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws)
}
#####################################
#####################################
#Task 2
loanData <- function(noApproved, noDenied, Undecided,
muApproved, muDenied, muUndecided,
sdApproved, sdDenied, sdUndecided,
rhoApproved, rhoDenied, rhoUndecided,
seed=1111)
{
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
sigmaUndecided <- sigmaXY(rho=rhoUndecided, sdX=sdUndecided[1], sdY=sdUndecided[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
undecided <- genBVN(Undecided, muUndecided, sigmaUndecided, seed = seed+2)
loanDf <- as.data.frame(rbind(approved,denied, undecided))
status <- c(rep("Approved", noApproved), rep("Denied", noDenied), rep("Undecided", Undecided))
target1 <- c(rep(1, noApproved), rep(0, noDenied),rep(0, Undecided))
target2 <- c(rep(0, noApproved), rep(1, noDenied),rep(0, Undecided))
target3 <- c(rep(0, noApproved), rep(0, noDenied),rep(1, Undecided))
loanDf <- data.frame(loanDf, status, target1, target2, target3)
colnames(loanDf) <- c("PIratio", "solvency", "status", "target1", "target2", "target3")
return(loanDf)
}
#Create Dataset
noApproved <- 50
noDenied   <- 50
Undecided  <- 50
#his parameters: c(4, 150), c(10, 100), c(1,20), c(2,30), -0.1, 0.6, 1221)
loanDf <- loanData(noApproved, noDenied, Undecided,
c(7, 150), c(10, 100), c(13, 250),
c(2,  20), c( 2,  30), c( 1,  15),
-0.5, 0.3, 0.5)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio,colour=status,fill=status)) +
geom_point() +
xlab("solvency") +
ylab("PI ratio") +
theme_bw()
libary(ggplot)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio,colour=status,fill=status)) +
geom_point() +
xlab("solvency") +
ylab("PI ratio") +
theme_bw()
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio,colour=status,fill=status)) +
geom_point() +
xlab("solvency") +
ylab("PI ratio") +
theme_bw()
sigmaXY <- function(rho, sdX, sdY) {
covTerm <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),2, 2, byrow = TRUE)
return(VCmatrix) }
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws) }
sigmaXY(rho=-0.1, sdX=1, sdY=20)
sigmaXY(rho=0.8, sdX=2, sdY=30)
loanData <- function(noApproved, noDenied, muApproved, muDenied, sdApproved,
sdDenied, rhoApproved, rhoDenied, seed=1111) {
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
loanDf <- as.data.frame(rbind(approved,denied))
deny <- c(rep("Approved", noApproved), rep("Denied", noDenied))
target = c(rep(0, noApproved), rep(1, noDenied))
loanDf <- data.frame(loanDf, deny, target)
colnames(loanDf) <- c("PIratio", "solvency", "deny", "target")
return(loanDf)
}
#########my analysis:
require(ggplot2)
dftest=data.frame(PIratio=loanDf$PIratio, absres=abs(residuals(datafit)))
ggplot(data=dftest, aes(x=PIratio, y=absres), fill=deny) +
geom_point() + xlab("PIratio") + ylab("abs residuals")+
theme_bw()+
scale_x_continuous("PIratio", limit = c(3, 11), breaks = seq(1, 11, 1), expand = c(0, 0)) +
scale_y_continuous("absolute resisudals", limit = c(-0.1, 0.6), breaks = seq(-0.1, 0.6, 0.2), expand = c(0, 0))
sigmaXY <- function(rho, sdX, sdY) {
covTerm <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),2, 2, byrow = TRUE)
return(VCmatrix) }
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws) }
sigmaXY(rho=-0.1, sdX=1, sdY=20)
sigmaXY(rho=0.8, sdX=2, sdY=30)
loanData <- function(noApproved, noDenied, muApproved, muDenied, sdApproved,
sdDenied, rhoApproved, rhoDenied, seed=1111) {
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
loanDf <- as.data.frame(rbind(approved,denied))
deny <- c(rep("Approved", noApproved), rep("Denied", noDenied))
target = c(rep(0, noApproved), rep(1, noDenied))
loanDf <- data.frame(loanDf, deny, target)
colnames(loanDf) <- c("PIratio", "solvency", "deny", "target")
return(loanDf)
}
require(ggplot2)
loanDf <- loanData(noApproved=50, noDenied=50, c(4, 150), c(10, 100), c(1,20), c(2,30), -0.1, 0.6, 1221)
library(ggplot2)
ggplot(data = loanDf, aes(x = solvency, y = PIratio, colour=deny, fill=deny))
+geom_point() + xlab("solvency") + ylab("PIratio")
+theme_bw() + theme(text=element_text(family="Arial"))
ggplot(data = loanDf,
aes(x = PIratio, y = target)) +
geom_point() + geom_smooth(method = "lm") +
scale_x_continuous("PIratio", limit = c(1, 16), breaks = seq(1, 16, 1), expand = c(0, 0)) +
scale_y_continuous("deny", limit = c(-0.4, 1.8), breaks = seq(-0.4, 1.8, 0.2), expand = c(0, 0)) +
geom_hline(yintercept = 0, size = 0.3, linetype = 2) +
annotate("text", x = 13, y = 0.1, label = "Approved", family = "Arial") +
geom_hline(yintercept = 1, size = 0.3, linetype = 2) +
annotate("text", x = 3, y = 1.1, label = "Denied", family = "Arial") +
theme_bw() +
theme(text = element_text(family = "Arial"))
loanDf <- loanData(noApproved=50, noDenied=50, c(4, 150), c(10, 100), c(1,20), c(2,30), -0.1, 0.6, 1221)
library(ggplot2)
ggplot(data = loanDf, aes(x = solvency, y = PIratio, colour=deny, fill=deny))
+geom_point() + xlab("solvency") + ylab("PIratio")
+theme_bw() + theme(text=element_text(family="Arial"))
loanDf <- loanData(noApproved=50, noDenied=50, c(4, 150), c(10, 100), c(1,20), c(2,30), -0.1, 0.6, 1221)
library(ggplot2)
ggplot(data = loanDf, aes(x = solvency, y = PIratio, colour=deny, fill=deny))
+geom_point() + xlab("solvency") + ylab("PIratio")
+theme_bw() + theme(text=element_text(family="Arial"))
sigmaXY <- function(rho, sdX, sdY) {
covTerm <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),2, 2, byrow = TRUE)
return(VCmatrix) }
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws) }
sigmaXY(rho=-0.1, sdX=1, sdY=20)
sigmaXY(rho=0.8, sdX=2, sdY=30)
loanData <- function(noApproved, noDenied, muApproved, muDenied, sdApproved,
sdDenied, rhoApproved, rhoDenied, seed=1111) {
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
loanDf <- as.data.frame(rbind(approved,denied))
deny <- c(rep("Approved", noApproved), rep("Denied", noDenied))
target = c(rep(0, noApproved), rep(1, noDenied))
loanDf <- data.frame(loanDf, deny, target)
colnames(loanDf) <- c("PIratio", "solvency", "deny", "target")
return(loanDf)
}
loanDf <- loanData(noApproved=50, noDenied=50, c(4, 150), c(10, 100), c(1,20), c(2,30), -0.1, 0.6, 1221)
library(ggplot2)
ggplot(data = loanDf, aes(x = solvency, y = PIratio, colour=deny, fill=deny))
+geom_point() + xlab("solvency") + ylab("PIratio")
+theme_bw() + theme(text=element_text(family="Arial"))
library(mvtnorm)
library(ggplot2)
library(extrafont)
loadfonts()
loanDf <- loanData(noApproved=50, noDenied=50, c(4, 150), c(10, 100), c(1,20), c(2,30), -0.1, 0.6, 1221)
library(ggplot2)
ggplot(data = loanDf, aes(x = solvency, y = PIratio, colour=deny, fill=deny))
+geom_point() + xlab("solvency") + ylab("PIratio")
+theme_bw() + theme(text=element_text(family="Arial"))
ggplot(data = loanDf,
aes(x = PIratio, y = target)) +
geom_point() + geom_smooth(method = "lm") +
scale_x_continuous("PIratio", limit = c(1, 16), breaks = seq(1, 16, 1), expand = c(0, 0)) +
scale_y_continuous("deny", limit = c(-0.4, 1.8), breaks = seq(-0.4, 1.8, 0.2), expand = c(0, 0)) +
geom_hline(yintercept = 0, size = 0.3, linetype = 2) +
annotate("text", x = 13, y = 0.1, label = "Approved", family = "Arial") +
geom_hline(yintercept = 1, size = 0.3, linetype = 2) +
annotate("text", x = 3, y = 1.1, label = "Denied", family = "Arial") +
theme_bw() +
theme(text = element_text(family = "Arial"))
dev.off()
rm(list = ls())
### Load Packages
if (!require("mvtnorm")) install.packages("mvtnorm"); library(mvtnorm)
if (!require("ggplot2")) install.packages("ggplot2"); library(ggplot2)
### Initialize auxilliary functions
# Create covariance matrix
sigmaXY <- function(rho, sdX, sdY) {
covTerm  <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
if (!require("mvtnorm")) install.packages("mvtnorm"); library(mvtnorm)
if (!require("ggplot2")) install.packages("ggplot2"); library(ggplot2)
### Initialize auxilliary functions
# Create covariance matrix
sigmaXY <- function(rho, sdX, sdY) {
covTerm  <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
return(VCmatrix)
}
# Generate bivariate normal data
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws)
}
#####################################
#####################################
#Task 2
loanData <- function(noApproved, noDenied, noUndecided,
muApproved, muDenied, muUndecided,
sdApproved, sdDenied, sdUndecided,
rhoApproved, rhoDenied, rhoUndecided,
seed=1111)
{
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
sigmaUndecided <- sigmaXY(rho=rhoUndecided, sdX=sdUndecided[1], sdY=sdUndecided[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
undecided <- genBVN(noUndecided, muUndecided, sigmaUndecided, seed = seed+2)
loanDf <- as.data.frame(rbind(approved,denied, undecided))
status <- c(rep("Approved", noApproved), rep("Denied", noDenied), rep("Undecided", noUndecided))
target1 <- c(rep(1, noApproved), rep(0, noDenied),rep(0, noUndecided))
target2 <- c(rep(0, noApproved), rep(1, noDenied),rep(0, noUndecided))
target3 <- c(rep(0, noApproved), rep(0, noDenied),rep(1, noUndecided))
loanDf <- data.frame(loanDf, status, target1, target2, target3)
colnames(loanDf) <- c("PIratio", "solvency", "status", "target1", "target2", "target3")
return(loanDf)
}
#Create Dataset
noApproved <- 50
noDenied   <- 50
Undecided  <- 50
#his parameters: c(4, 150), c(10, 100), c(1,20), c(2,30), -0.1, 0.6, 1221)
loanDf <- loanData(noApproved, noDenied, Undecided,
c(7, 150), c(10, 100), c(13, 250),
c(2,  20), c( 2,  30), c( 1,  15),
-0.5, 0.3, 0.5)
#x <- seq(min(loanDf["PIratio"]), max(loanDf["PIratio"]), length.out = noApproved+noDenied+Undecided)
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio,colour=status,fill=status)) +
geom_point() +
xlab("solvency") +
ylab("PI ratio") +
theme_bw()
l
rm(list = ls())
### Load Packages
if (!require("mvtnorm")) install.packages("mvtnorm"); library(mvtnorm)
if (!require("ggplot2")) install.packages("ggplot2"); library(ggplot2)
### Initialize auxilliary functions
# Create covariance matrix
sigmaXY <- function(rho, sdX, sdY) {
covTerm  <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
sigmaXY <- function(rho, sdX, sdY) {
covTerm  <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
return(VCmatrix)
}
sigmaXY <- function(rho, sdX, sdY) {
covTerm  <- rho * sdX * sdY
VCmatrix <- matrix(c(sdX^2, covTerm, covTerm, sdY^2),
2, 2, byrow = TRUE)
return(VCmatrix)
}
genBVN <- function(n = 1, seed = NA, muXY=c(0,1), sigmaXY=diag(2)) {
if(!is.na(seed)) set.seed(seed)
rdraws <- rmvnorm(n, mean = muXY, sigma = sigmaXY)
return(rdraws)
}
#####################################
#####################################
#Task 2
loanData <- function(noApproved, noDenied, noUndecided,
muApproved, muDenied, muUndecided,
sdApproved, sdDenied, sdUndecided,
rhoApproved, rhoDenied, rhoUndecided,
seed=1111)
{
sigmaApproved <- sigmaXY(rho=rhoApproved, sdX=sdApproved[1], sdY=sdApproved[2])
sigmaDenied <- sigmaXY(rho=rhoDenied, sdX=sdDenied[1], sdY=sdDenied[2])
sigmaUndecided <- sigmaXY(rho=rhoUndecided, sdX=sdUndecided[1], sdY=sdUndecided[2])
approved <- genBVN(noApproved, muApproved, sigmaApproved, seed = seed)
denied <- genBVN(noDenied, muDenied, sigmaDenied, seed = seed+1)
undecided <- genBVN(noUndecided, muUndecided, sigmaUndecided, seed = seed+2)
loanDf <- as.data.frame(rbind(approved,denied, undecided))
status <- c(rep("Approved", noApproved), rep("Denied", noDenied), rep("Undecided", noUndecided))
target1 <- c(rep(1, noApproved), rep(0, noDenied),rep(0, noUndecided))
target2 <- c(rep(0, noApproved), rep(1, noDenied),rep(0, noUndecided))
target3 <- c(rep(0, noApproved), rep(0, noDenied),rep(1, noUndecided))
loanDf <- data.frame(loanDf, status, target1, target2, target3)
colnames(loanDf) <- c("PIratio", "solvency", "status", "target1", "target2", "target3")
return(loanDf)
}
#Create Dataset
noApproved <- 50
noDenied   <- 50
Undecided  <- 50
#his parameters: c(4, 150), c(10, 100), c(1,20), c(2,30), -0.1, 0.6, 1221)
loanDf <- loanData(noApproved, noDenied, Undecided,
c(7, 150), c(10, 100), c(13, 250),
c(2,  20), c( 2,  30), c( 1,  15),
-0.5, 0.3, 0.5)
#x <- seq(min(loanDf["PIratio"]), max(loanDf["PIratio"]), length.out = noApproved+noDenied+Undecided)
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio,colour=status,fill=status)) +
geom_point() +
xlab("solvency") +
ylab("PI ratio") +
theme_bw()
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio,colour=status,fill=deny)) +
geom_point() +
xlab("solvency") +
ylab("PI ratio") +
theme_bw()
library(ggplot2)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio,colour=status,fill=status)) +
geom_point() +
xlab("solvency") +
ylab("PI ratio") +
theme_bw()
head(loanDf)
ggplot(data = loanDf,
aes(x = solvency, y = PIratio,colour=status,fill=status)) +
geom_point()
