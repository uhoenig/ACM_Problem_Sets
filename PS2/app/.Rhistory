setwd("~/Dropbox/Studium 2015-16 GSE/Term 2/Advanced Computing/spark")
library(babynames) # data package
install.packages("babynames")
library(babynames) # data package
head(babynames)
library(dplyr)     # provides data manipulating functions.
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)     # provides data manipulating functions.
library(magrittr)  # ceci n'est pas un pipe
library(ggplot2)   # for graphics
head(babynames)
babynames %>%
filter(name %>% substr(1, 3) %>% equals("Ste")) %>%
group_by(year, sex) %>%
summarize(total = sum(n)) %>%
qplot(year, total, color = sex, data = ., geom = "line") %>%
add(ggtitle('Names starting with "Ste"')) %>%
print
setwd("~/Dropbox/Studium 2015-16 GSE/Term 2/Financial Econometrics/Homework")
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran  <- tbl_df(mydf)
rm("mydf")
class(cran)
cran
head(df)
swirl()
df<-read.table("macro-dataset.csv", sep="", header=T) #casesensitive
#############################################
#look at the data in a preview way
head(df)
test  <- tbl_df(df)
test
class(test)
test[1,2]
test[10,2]
test=df[,c("DATE", "CFNAI", "HOUST", "INDPRO", "PSAVERT", "UNRATE")]
test
test  <- tbl_df(df)
test=test[,c("DATE", "CFNAI", "HOUST", "INDPRO", "PSAVERT", "UNRATE")]
test
swirl()
1
?sselect
?select
select(cran,ip_id,package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran, package=="swirl")
filter(cran, r_version == "3.1.1", country== "US")
?Comparison
filter(cran, r_version <= "3.0.2", country in  "US")
filter(cran, r_version <= "3.0.2", country "IN" "US")
filter(cran, r_version <= "3.0.2", country == "India")
filter(cran, r_version <= "3.0.2", country == "IN" India")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size >100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
select(cran,size:ip_id)
cran2=select(cran,size:ip_id)
cran2=select(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id,package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb=size_mb / 2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
setwd("~/Dropbox/Studium 2015-16 GSE/Term 2/Machine learning/HW")
setwd("~/Dropbox/Studium 2015-16 GSE/Term 2/Financial Econometrics/Homework")
setwd("~/Dropbox/Studium 2015-16 GSE/Term 2/Advanced Computing/PS2/app")
shinyUI( pageWithSidebar(
headerPanel('Iris k-means clustering'),
sidebarPanel( selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris), selected=names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel( plotOutput('plot1') ) ) )
shinyServer(function(input, output, session) {
# Combine the selected variables into a new data frame
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)] #input is a list of objects defined in ui.R, input$xcol calls the column name
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
})
append()
app
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Dropbox/Studium 2015-16 GSE/Term 2/Machine learning/HW")
setwd("~/Dropbox/Studium 2015-16 GSE/Term 2/Financial Econometrics/Homework")
setwd("~/Dropbox/Studium 2015-16 GSE/Term 2/Advanced Computing/PS2/app")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot <- ggplot(data = loanDf, aes(x = solvency, y = PIratio,
# Last update:  29.01.16
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
